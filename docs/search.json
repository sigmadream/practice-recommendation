[
  {
    "objectID": "practice/practice03.html",
    "href": "practice/practice03.html",
    "title": "추천 시스템 스터디 실습 예제 3",
    "section": "",
    "text": "2006년부터 3년간 운영된 경진 대회\n추천 시스템 품질을 10% 개선하는 팀에서 $1M 수여\n\nRMSE가 평가 기준\n사용자와 영화 페어 평점을 예측하고 정답값과 비교\n\n브랜드 인지도 / 프라이버시"
  },
  {
    "objectID": "practice/practice03.html#넷플릭스-경진대회netflix-prize",
    "href": "practice/practice03.html#넷플릭스-경진대회netflix-prize",
    "title": "추천 시스템 스터디 실습 예제 3",
    "section": "",
    "text": "2006년부터 3년간 운영된 경진 대회\n추천 시스템 품질을 10% 개선하는 팀에서 $1M 수여\n\nRMSE가 평가 기준\n사용자와 영화 페어 평점을 예측하고 정답값과 비교\n\n브랜드 인지도 / 프라이버시"
  },
  {
    "objectID": "practice/practice03.html#입력-데이터-로딩",
    "href": "practice/practice03.html#입력-데이터-로딩",
    "title": "추천 시스템 스터디 실습 예제 3",
    "section": "입력 데이터 로딩",
    "text": "입력 데이터 로딩\n\n영화 정보는 tmdb_5000_movies.csv\n연출/배우에 대한 정보는 tmdb_5000_credits.csv\n\n이 두 파일은 영화의 id 필드와 연출/배우의 movie_id 필드로 조인 가능하다.\n\nimport pandas as pd\nimport numpy as np\n\n\nRunning cells with '.venv (Python 3.11.9)' requires the ipykernel package.\n\nRun the following command to install 'ipykernel' into the Python environment. \n\nCommand: 'c:/Users/sigma/Practices/study-susc/.venv/Scripts/python.exe -m pip install ipykernel -U --force-reinstall'\n\n\n\n\nmovies = pd.read_csv(\"https://grepp-reco-test.s3.ap-northeast-2.amazonaws.com/tmdb_5000_movies.csv\")\n\n\ncredits = pd.read_csv(\"https://grepp-reco-test.s3.ap-northeast-2.amazonaws.com/tmdb_5000_credits.csv\")\n\n\nmovies.head()\n\n\n  \n    \n\n\n\n\n\n\nbudget\ngenres\nhomepage\nid\nkeywords\noriginal_language\noriginal_title\noverview\npopularity\nproduction_companies\nproduction_countries\nrelease_date\nrevenue\nruntime\nspoken_languages\nstatus\ntagline\ntitle\nvote_average\nvote_count\n\n\n\n\n0\n237000000\n[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...\nhttp://www.avatarmovie.com/\n19995\n[{\"id\": 1463, \"name\": \"culture clash\"}, {\"id\":...\nen\nAvatar\nIn the 22nd century, a paraplegic Marine is di...\n150.437577\n[{\"name\": \"Ingenious Film Partners\", \"id\": 289...\n[{\"iso_3166_1\": \"US\", \"name\": \"United States o...\n2009-12-10\n2787965087\n162.0\n[{\"iso_639_1\": \"en\", \"name\": \"English\"}, {\"iso...\nReleased\nEnter the World of Pandora.\nAvatar\n7.2\n11800\n\n\n1\n300000000\n[{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...\nhttp://disney.go.com/disneypictures/pirates/\n285\n[{\"id\": 270, \"name\": \"ocean\"}, {\"id\": 726, \"na...\nen\nPirates of the Caribbean: At World's End\nCaptain Barbossa, long believed to be dead, ha...\n139.082615\n[{\"name\": \"Walt Disney Pictures\", \"id\": 2}, {\"...\n[{\"iso_3166_1\": \"US\", \"name\": \"United States o...\n2007-05-19\n961000000\n169.0\n[{\"iso_639_1\": \"en\", \"name\": \"English\"}]\nReleased\nAt the end of the world, the adventure begins.\nPirates of the Caribbean: At World's End\n6.9\n4500\n\n\n2\n245000000\n[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...\nhttp://www.sonypictures.com/movies/spectre/\n206647\n[{\"id\": 470, \"name\": \"spy\"}, {\"id\": 818, \"name...\nen\nSpectre\nA cryptic message from Bond’s past sends him o...\n107.376788\n[{\"name\": \"Columbia Pictures\", \"id\": 5}, {\"nam...\n[{\"iso_3166_1\": \"GB\", \"name\": \"United Kingdom\"...\n2015-10-26\n880674609\n148.0\n[{\"iso_639_1\": \"fr\", \"name\": \"Fran\\u00e7ais\"},...\nReleased\nA Plan No One Escapes\nSpectre\n6.3\n4466\n\n\n3\n250000000\n[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 80, \"nam...\nhttp://www.thedarkknightrises.com/\n49026\n[{\"id\": 849, \"name\": \"dc comics\"}, {\"id\": 853,...\nen\nThe Dark Knight Rises\nFollowing the death of District Attorney Harve...\n112.312950\n[{\"name\": \"Legendary Pictures\", \"id\": 923}, {\"...\n[{\"iso_3166_1\": \"US\", \"name\": \"United States o...\n2012-07-16\n1084939099\n165.0\n[{\"iso_639_1\": \"en\", \"name\": \"English\"}]\nReleased\nThe Legend Ends\nThe Dark Knight Rises\n7.6\n9106\n\n\n4\n260000000\n[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...\nhttp://movies.disney.com/john-carter\n49529\n[{\"id\": 818, \"name\": \"based on novel\"}, {\"id\":...\nen\nJohn Carter\nJohn Carter is a war-weary, former military ca...\n43.926995\n[{\"name\": \"Walt Disney Pictures\", \"id\": 2}]\n[{\"iso_3166_1\": \"US\", \"name\": \"United States o...\n2012-03-07\n284139100\n132.0\n[{\"iso_639_1\": \"en\", \"name\": \"English\"}]\nReleased\nLost in our world, found in another.\nJohn Carter\n6.1\n2124\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\nmovies.shape\n\n(4803, 20)\n\n\n\nimport json\n\ndef add_genre_name(j):\n    genres = []\n    ar = json.loads(j)\n    for a in ar:\n        genres.append(a.get(\"name\"))\n    return \" \".join(sorted(genres))\n\nmovies['genres_name'] = movies.apply(lambda x: add_genre_name(x.genres), axis=1)\n\n\nmovies[['genres_name']].head()   # vs. movies['genres_name'].head()\n\n\n  \n    \n\n\n\n\n\n\ngenres_name\n\n\n\n\n0\nAction Adventure Fantasy Science Fiction\n\n\n1\nAction Adventure Fantasy\n\n\n2\nAction Adventure Crime\n\n\n3\nAction Crime Drama Thriller\n\n\n4\nAction Adventure Science Fiction\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\nmovies['genres_name'].nunique()\n\n638\n\n\n\nmovies.groupby('genres_name').size()\n\ngenres_name\n                                            28\nAction                                      21\nAction Adventure                            15\nAction Adventure Animation                   1\nAction Adventure Animation Comedy Family     5\n                                            ..\nScience Fiction Thriller                    12\nThriller                                    23\nWar                                          2\nWar Western                                  1\nWestern                                     18\nLength: 638, dtype: int64\n\n\n\ncredits.head()\n\n\n  \n    \n\n\n\n\n\n\nmovie_id\ntitle\ncast\ncrew\n\n\n\n\n0\n19995\nAvatar\n[{\"cast_id\": 242, \"character\": \"Jake Sully\", \"...\n[{\"credit_id\": \"52fe48009251416c750aca23\", \"de...\n\n\n1\n285\nPirates of the Caribbean: At World's End\n[{\"cast_id\": 4, \"character\": \"Captain Jack Spa...\n[{\"credit_id\": \"52fe4232c3a36847f800b579\", \"de...\n\n\n2\n206647\nSpectre\n[{\"cast_id\": 1, \"character\": \"James Bond\", \"cr...\n[{\"credit_id\": \"54805967c3a36829b5002c41\", \"de...\n\n\n3\n49026\nThe Dark Knight Rises\n[{\"cast_id\": 2, \"character\": \"Bruce Wayne / Ba...\n[{\"credit_id\": \"52fe4781c3a36847f81398c3\", \"de...\n\n\n4\n49529\nJohn Carter\n[{\"cast_id\": 5, \"character\": \"John Carter\", \"c...\n[{\"credit_id\": \"52fe479ac3a36847f813eaa3\", \"de...\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\ncredits.shape\n\n(4803, 4)\n\n\n\nmovies와 credits 데이터프레임을 조인\n\nmovie_credits = pd.merge(movies, credits, left_on='id', right_on='movie_id')\n\n\nmovie_credits.head()\n\n\n  \n    \n\n\n\n\n\n\nbudget\ngenres\nhomepage\nid\nkeywords\noriginal_language\noriginal_title\noverview\npopularity\nproduction_companies\n...\nstatus\ntagline\ntitle_x\nvote_average\nvote_count\ngenres_name\nmovie_id\ntitle_y\ncast\ncrew\n\n\n\n\n0\n237000000\n[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...\nhttp://www.avatarmovie.com/\n19995\n[{\"id\": 1463, \"name\": \"culture clash\"}, {\"id\":...\nen\nAvatar\nIn the 22nd century, a paraplegic Marine is di...\n150.437577\n[{\"name\": \"Ingenious Film Partners\", \"id\": 289...\n...\nReleased\nEnter the World of Pandora.\nAvatar\n7.2\n11800\nAction Adventure Fantasy Science Fiction\n19995\nAvatar\n[{\"cast_id\": 242, \"character\": \"Jake Sully\", \"...\n[{\"credit_id\": \"52fe48009251416c750aca23\", \"de...\n\n\n1\n300000000\n[{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...\nhttp://disney.go.com/disneypictures/pirates/\n285\n[{\"id\": 270, \"name\": \"ocean\"}, {\"id\": 726, \"na...\nen\nPirates of the Caribbean: At World's End\nCaptain Barbossa, long believed to be dead, ha...\n139.082615\n[{\"name\": \"Walt Disney Pictures\", \"id\": 2}, {\"...\n...\nReleased\nAt the end of the world, the adventure begins.\nPirates of the Caribbean: At World's End\n6.9\n4500\nAction Adventure Fantasy\n285\nPirates of the Caribbean: At World's End\n[{\"cast_id\": 4, \"character\": \"Captain Jack Spa...\n[{\"credit_id\": \"52fe4232c3a36847f800b579\", \"de...\n\n\n2\n245000000\n[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...\nhttp://www.sonypictures.com/movies/spectre/\n206647\n[{\"id\": 470, \"name\": \"spy\"}, {\"id\": 818, \"name...\nen\nSpectre\nA cryptic message from Bond’s past sends him o...\n107.376788\n[{\"name\": \"Columbia Pictures\", \"id\": 5}, {\"nam...\n...\nReleased\nA Plan No One Escapes\nSpectre\n6.3\n4466\nAction Adventure Crime\n206647\nSpectre\n[{\"cast_id\": 1, \"character\": \"James Bond\", \"cr...\n[{\"credit_id\": \"54805967c3a36829b5002c41\", \"de...\n\n\n3\n250000000\n[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 80, \"nam...\nhttp://www.thedarkknightrises.com/\n49026\n[{\"id\": 849, \"name\": \"dc comics\"}, {\"id\": 853,...\nen\nThe Dark Knight Rises\nFollowing the death of District Attorney Harve...\n112.312950\n[{\"name\": \"Legendary Pictures\", \"id\": 923}, {\"...\n...\nReleased\nThe Legend Ends\nThe Dark Knight Rises\n7.6\n9106\nAction Crime Drama Thriller\n49026\nThe Dark Knight Rises\n[{\"cast_id\": 2, \"character\": \"Bruce Wayne / Ba...\n[{\"credit_id\": \"52fe4781c3a36847f81398c3\", \"de...\n\n\n4\n260000000\n[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...\nhttp://movies.disney.com/john-carter\n49529\n[{\"id\": 818, \"name\": \"based on novel\"}, {\"id\":...\nen\nJohn Carter\nJohn Carter is a war-weary, former military ca...\n43.926995\n[{\"name\": \"Walt Disney Pictures\", \"id\": 2}]\n...\nReleased\nLost in our world, found in another.\nJohn Carter\n6.1\n2124\nAction Adventure Science Fiction\n49529\nJohn Carter\n[{\"cast_id\": 5, \"character\": \"John Carter\", \"c...\n[{\"credit_id\": \"52fe479ac3a36847f813eaa3\", \"de...\n\n\n\n\n5 rows × 25 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\nmovie_credits = movie_credits.drop(columns=['homepage', 'title_x', 'title_y', 'status','production_countries', 'production_companies'])\nmovie_credits.head()\n\n\n  \n    \n\n\n\n\n\n\nbudget\ngenres\nid\nkeywords\noriginal_language\noriginal_title\noverview\npopularity\nrelease_date\nrevenue\nruntime\nspoken_languages\ntagline\nvote_average\nvote_count\ngenres_name\nmovie_id\ncast\ncrew\n\n\n\n\n0\n237000000\n[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...\n19995\n[{\"id\": 1463, \"name\": \"culture clash\"}, {\"id\":...\nen\nAvatar\nIn the 22nd century, a paraplegic Marine is di...\n150.437577\n2009-12-10\n2787965087\n162.0\n[{\"iso_639_1\": \"en\", \"name\": \"English\"}, {\"iso...\nEnter the World of Pandora.\n7.2\n11800\nAction Adventure Fantasy Science Fiction\n19995\n[{\"cast_id\": 242, \"character\": \"Jake Sully\", \"...\n[{\"credit_id\": \"52fe48009251416c750aca23\", \"de...\n\n\n1\n300000000\n[{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...\n285\n[{\"id\": 270, \"name\": \"ocean\"}, {\"id\": 726, \"na...\nen\nPirates of the Caribbean: At World's End\nCaptain Barbossa, long believed to be dead, ha...\n139.082615\n2007-05-19\n961000000\n169.0\n[{\"iso_639_1\": \"en\", \"name\": \"English\"}]\nAt the end of the world, the adventure begins.\n6.9\n4500\nAction Adventure Fantasy\n285\n[{\"cast_id\": 4, \"character\": \"Captain Jack Spa...\n[{\"credit_id\": \"52fe4232c3a36847f800b579\", \"de...\n\n\n2\n245000000\n[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...\n206647\n[{\"id\": 470, \"name\": \"spy\"}, {\"id\": 818, \"name...\nen\nSpectre\nA cryptic message from Bond’s past sends him o...\n107.376788\n2015-10-26\n880674609\n148.0\n[{\"iso_639_1\": \"fr\", \"name\": \"Fran\\u00e7ais\"},...\nA Plan No One Escapes\n6.3\n4466\nAction Adventure Crime\n206647\n[{\"cast_id\": 1, \"character\": \"James Bond\", \"cr...\n[{\"credit_id\": \"54805967c3a36829b5002c41\", \"de...\n\n\n3\n250000000\n[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 80, \"nam...\n49026\n[{\"id\": 849, \"name\": \"dc comics\"}, {\"id\": 853,...\nen\nThe Dark Knight Rises\nFollowing the death of District Attorney Harve...\n112.312950\n2012-07-16\n1084939099\n165.0\n[{\"iso_639_1\": \"en\", \"name\": \"English\"}]\nThe Legend Ends\n7.6\n9106\nAction Crime Drama Thriller\n49026\n[{\"cast_id\": 2, \"character\": \"Bruce Wayne / Ba...\n[{\"credit_id\": \"52fe4781c3a36847f81398c3\", \"de...\n\n\n4\n260000000\n[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...\n49529\n[{\"id\": 818, \"name\": \"based on novel\"}, {\"id\":...\nen\nJohn Carter\nJohn Carter is a war-weary, former military ca...\n43.926995\n2012-03-07\n284139100\n132.0\n[{\"iso_639_1\": \"en\", \"name\": \"English\"}]\nLost in our world, found in another.\n6.1\n2124\nAction Adventure Science Fiction\n49529\n[{\"cast_id\": 5, \"character\": \"John Carter\", \"c...\n[{\"credit_id\": \"52fe479ac3a36847f813eaa3\", \"de...\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\nmovie_credits.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nInt64Index: 4803 entries, 0 to 4802\nData columns (total 19 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   budget             4803 non-null   int64  \n 1   genres             4803 non-null   object \n 2   id                 4803 non-null   int64  \n 3   keywords           4803 non-null   object \n 4   original_language  4803 non-null   object \n 5   original_title     4803 non-null   object \n 6   overview           4800 non-null   object \n 7   popularity         4803 non-null   float64\n 8   release_date       4802 non-null   object \n 9   revenue            4803 non-null   int64  \n 10  runtime            4801 non-null   float64\n 11  spoken_languages   4803 non-null   object \n 12  tagline            3959 non-null   object \n 13  vote_average       4803 non-null   float64\n 14  vote_count         4803 non-null   int64  \n 15  genres_name        4803 non-null   object \n 16  movie_id           4803 non-null   int64  \n 17  cast               4803 non-null   object \n 18  crew               4803 non-null   object \ndtypes: float64(3), int64(5), object(11)\nmemory usage: 750.5+ KB\n\n\n\nmovie_credits.describe()\n\n\n  \n    \n\n\n\n\n\n\nbudget\nid\npopularity\nrevenue\nruntime\nvote_average\nvote_count\nmovie_id\n\n\n\n\ncount\n4.803000e+03\n4803.000000\n4803.000000\n4.803000e+03\n4801.000000\n4803.000000\n4803.000000\n4803.000000\n\n\nmean\n2.904504e+07\n57165.484281\n21.492301\n8.226064e+07\n106.875859\n6.092172\n690.217989\n57165.484281\n\n\nstd\n4.072239e+07\n88694.614033\n31.816650\n1.628571e+08\n22.611935\n1.194612\n1234.585891\n88694.614033\n\n\nmin\n0.000000e+00\n5.000000\n0.000000\n0.000000e+00\n0.000000\n0.000000\n0.000000\n5.000000\n\n\n25%\n7.900000e+05\n9014.500000\n4.668070\n0.000000e+00\n94.000000\n5.600000\n54.000000\n9014.500000\n\n\n50%\n1.500000e+07\n14629.000000\n12.921594\n1.917000e+07\n103.000000\n6.200000\n235.000000\n14629.000000\n\n\n75%\n4.000000e+07\n58610.500000\n28.313505\n9.291719e+07\n118.000000\n6.800000\n737.000000\n58610.500000\n\n\nmax\n3.800000e+08\n459488.000000\n875.581305\n2.787965e+09\n338.000000\n10.000000\n13752.000000\n459488.000000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\npopularity = movie_credits.sort_values('popularity',ascending=False)\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nplt.figure(figsize=(12,6))\nax=sns.barplot(\n    x=popularity['popularity'].head(10),\n    y=popularity['original_title'].head(10)\n)\n\nplt.title('Most Popular by Popularity', weight='bold')\nplt.xlabel('Score of Popularity', weight='bold')\nplt.ylabel('Movie Title', weight='bold')\nplt.savefig('best_popular_movies.png')\n\n\n\n\n\n\n\n\n\ndef reco_top_scored_one(n, genre=None):\n  if genre is None:\n    return popularity[\"original_title\"].head(n)\n  else:\n    return popularity[popularity['genres_name'].str.contains(genre)][\"original_title\"].head(n)\n\n\nprint(reco_top_scored_one(10))\n\n546                                              Minions\n95                                          Interstellar\n788                                             Deadpool\n94                               Guardians of the Galaxy\n127                                   Mad Max: Fury Road\n28                                        Jurassic World\n199    Pirates of the Caribbean: The Curse of the Bla...\n82                        Dawn of the Planet of the Apes\n200                The Hunger Games: Mockingjay - Part 1\n88                                            Big Hero 6\nName: original_title, dtype: object\n\n\n\nprint(reco_top_scored_one(10, \"Science Fiction\"))\n\n95                              Interstellar\n94                   Guardians of the Galaxy\n127                       Mad Max: Fury Road\n28                            Jurassic World\n82            Dawn of the Planet of the Apes\n200    The Hunger Games: Mockingjay - Part 1\n108                       Terminator Genisys\n26                Captain America: Civil War\n270                              The Martian\n96                                 Inception\nName: original_title, dtype: object\n\n\n\nprint(reco_top_scored_one(10, \"Action\"))\n\n788                                             Deadpool\n94                               Guardians of the Galaxy\n127                                   Mad Max: Fury Road\n28                                        Jurassic World\n199    Pirates of the Caribbean: The Curse of the Bla...\n82                        Dawn of the Planet of the Apes\n88                                            Big Hero 6\n108                                   Terminator Genisys\n26                            Captain America: Civil War\n65                                       The Dark Knight\nName: original_title, dtype: object"
  },
  {
    "objectID": "practice/practice01.html",
    "href": "practice/practice01.html",
    "title": "추천 시스템 스터디 실습 예제 1",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nimport koreanize_matplotlib",
    "crumbs": [
      "Home",
      "예제",
      "추천 시스템 스터디 실습 예제 1"
    ]
  },
  {
    "objectID": "practice/practice01.html#데이터-읽어오기",
    "href": "practice/practice01.html#데이터-읽어오기",
    "title": "추천 시스템 스터디 실습 예제 1",
    "section": "데이터 읽어오기",
    "text": "데이터 읽어오기\n\ndf = pd.read_csv(\"data/출생아수(2022).csv\")\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 19 entries, 0 to 18\nColumns: 937 entries, 시군구별 to 2022.12.2\ndtypes: object(937)\nmemory usage: 139.2+ KB\n\n\n\ninfo에 대한 이해\n\n행, row, 종속변인\n열, col, 독립변인, 특징, feat",
    "crumbs": [
      "Home",
      "예제",
      "추천 시스템 스터디 실습 예제 1"
    ]
  },
  {
    "objectID": "practice/practice01.html#데이터-확인",
    "href": "practice/practice01.html#데이터-확인",
    "title": "추천 시스템 스터디 실습 예제 1",
    "section": "데이터 확인",
    "text": "데이터 확인\n\nTidy Data\n\n\ndf.head()\n\n\n\n\n\n\n\n\n시군구별\n1997.01\n1997.01.1\n1997.01.2\n1997.02\n1997.02.1\n1997.02.2\n1997.03\n1997.03.1\n1997.03.2\n...\n2022.09.2\n2022.10\n2022.10.1\n2022.10.2\n2022.11\n2022.11.1\n2022.11.2\n2022.12\n2022.12.1\n2022.12.2\n\n\n\n\n0\n시군구별\n계 (명)\n남자 (명)\n여자 (명)\n계 (명)\n남자 (명)\n여자 (명)\n계 (명)\n남자 (명)\n여자 (명)\n...\n여자 (명)\n계 (명)\n남자 (명)\n여자 (명)\n계 (명)\n남자 (명)\n여자 (명)\n계 (명)\n남자 (명)\n여자 (명)\n\n\n1\n전국\n63268\n33266\n30002\n58144\n30086\n28058\n62160\n32333\n29827\n...\n10715\n20646\n10530\n10116\n18981\n9737\n9244\n16896\n8684\n8212\n\n\n2\n서울특별시\n13205\n6886\n6319\n12239\n6224\n6015\n13358\n6947\n6411\n...\n1831\n3612\n1794\n1818\n3230\n1678\n1552\n2901\n1472\n1429\n\n\n3\n부산광역시\n4201\n2260\n1941\n3910\n2104\n1806\n4304\n2234\n2070\n...\n575\n1166\n602\n564\n977\n479\n498\n957\n528\n429\n\n\n4\n대구광역시\n3345\n1764\n1581\n2994\n1608\n1386\n3337\n1815\n1522\n...\n416\n848\n428\n420\n802\n406\n396\n663\n334\n329\n\n\n\n\n5 rows × 937 columns",
    "crumbs": [
      "Home",
      "예제",
      "추천 시스템 스터디 실습 예제 1"
    ]
  },
  {
    "objectID": "practice/practice01.html#데이터-변형",
    "href": "practice/practice01.html#데이터-변형",
    "title": "추천 시스템 스터디 실습 예제 1",
    "section": "데이터 변형",
    "text": "데이터 변형\n\nhttps://pandas.pydata.org/docs/reference/api/pandas.melt.html\nhttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html\nhttps://pandas.pydata.org/docs/reference/api/pandas.merge.html\nhttps://pandas.pydata.org/docs/reference/api/pandas.concat.html\n\n\ndf = df.melt(id_vars=\"시군구별\")\ndf.head()\n\n\n\n\n\n\n\n\n시군구별\nvariable\nvalue\n\n\n\n\n0\n시군구별\n1997.01\n계 (명)\n\n\n1\n전국\n1997.01\n63268\n\n\n2\n서울특별시\n1997.01\n13205\n\n\n3\n부산광역시\n1997.01\n4201\n\n\n4\n대구광역시\n1997.01\n3345\n\n\n\n\n\n\n\n\n# https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#\ndf[\"시군구별\"].unique()\n\narray(['시군구별', '전국', '서울특별시', '부산광역시', '대구광역시', '인천광역시', '광주광역시', '대전광역시',\n       '울산광역시', '세종특별자치시', '경기도', '강원도', '충청북도', '충청남도', '전라북도', '전라남도',\n       '경상북도', '경상남도', '제주특별자치도'], dtype=object)\n\n\n\n# https://pandas.pydata.org/docs/user_guide/indexing.html#boolean-indexing\ndf = df[df[\"시군구별\"] != \"시군구별\"].copy()\n\n\ndf.shape\n\n(16848, 3)\n\n\n\ndf[\"시군구별\"].unique()\n\narray(['전국', '서울특별시', '부산광역시', '대구광역시', '인천광역시', '광주광역시', '대전광역시',\n       '울산광역시', '세종특별자치시', '경기도', '강원도', '충청북도', '충청남도', '전라북도', '전라남도',\n       '경상북도', '경상남도', '제주특별자치도'], dtype=object)\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\n시군구별\nvariable\nvalue\n\n\n\n\n1\n전국\n1997.01\n63268\n\n\n2\n서울특별시\n1997.01\n13205\n\n\n3\n부산광역시\n1997.01\n4201\n\n\n4\n대구광역시\n1997.01\n3345\n\n\n5\n인천광역시\n1997.01\n3646\n\n\n\n\n\n\n\n\n# https://pandas.pydata.org/docs/reference/api/pandas.Series.str.split.html#pandas-series-str-split\ndf[\"연도\"] = df[\"variable\"].str.split(\".\", expand=True)[0]\n\n\ndf[\"월\"] = df[\"variable\"].str.split(\".\", expand=True)[1]\n\n\ndf[\"성별\"] = df[\"variable\"].str.split(\".\", expand=True)[2]\n\n\ndf.head()\n\n\n\n\n\n\n\n\n시군구별\nvariable\nvalue\n연도\n월\n성별\n\n\n\n\n1\n전국\n1997.01\n63268\n1997\n01\nNone\n\n\n2\n서울특별시\n1997.01\n13205\n1997\n01\nNone\n\n\n3\n부산광역시\n1997.01\n4201\n1997\n01\nNone\n\n\n4\n대구광역시\n1997.01\n3345\n1997\n01\nNone\n\n\n5\n인천광역시\n1997.01\n3646\n1997\n01\nNone\n\n\n\n\n\n\n\n\ndf.tail()\n\n\n\n\n\n\n\n\n시군구별\nvariable\nvalue\n연도\n월\n성별\n\n\n\n\n17779\n전라북도\n2022.12.2\n229\n2022\n12\n2\n\n\n17780\n전라남도\n2022.12.2\n250\n2022\n12\n2\n\n\n17781\n경상북도\n2022.12.2\n366\n2022\n12\n2\n\n\n17782\n경상남도\n2022.12.2\n503\n2022\n12\n2\n\n\n17783\n제주특별자치도\n2022.12.2\n121\n2022\n12\n2\n\n\n\n\n\n\n\n\ndf[\"성별\"].unique()\n\narray([None, '1', '2'], dtype=object)\n\n\n\ndf[\"성별\"].nunique()\n\n2\n\n\n\ndf[\"성별\"] = df[\"성별\"].fillna(\"전체\")\ndf[\"성별\"].unique()\n\narray(['전체', '1', '2'], dtype=object)\n\n\n\ndf[\"성별\"] = df[\"성별\"].replace(\"1\", \"남자\").replace(\"2\", \"여자\")\ndf[\"성별\"].unique()\n\narray(['전체', '남자', '여자'], dtype=object)\n\n\n\ndf[\"성별\"].value_counts()\n\n성별\n전체    5616\n남자    5616\n여자    5616\nName: count, dtype: int64\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\n시군구별\nvariable\nvalue\n연도\n월\n성별\n\n\n\n\n1\n전국\n1997.01\n63268\n1997\n01\n전체\n\n\n2\n서울특별시\n1997.01\n13205\n1997\n01\n전체\n\n\n3\n부산광역시\n1997.01\n4201\n1997\n01\n전체\n\n\n4\n대구광역시\n1997.01\n3345\n1997\n01\n전체\n\n\n5\n인천광역시\n1997.01\n3646\n1997\n01\n전체\n\n\n\n\n\n\n\n\ndf = df.rename(columns={\"variable\": \"기간\", \"value\": \"출생아수\"})\ndf.head()\n\n\n\n\n\n\n\n\n시군구별\n기간\n출생아수\n연도\n월\n성별\n\n\n\n\n1\n전국\n1997.01\n63268\n1997\n01\n전체\n\n\n2\n서울특별시\n1997.01\n13205\n1997\n01\n전체\n\n\n3\n부산광역시\n1997.01\n4201\n1997\n01\n전체\n\n\n4\n대구광역시\n1997.01\n3345\n1997\n01\n전체\n\n\n5\n인천광역시\n1997.01\n3646\n1997\n01\n전체\n\n\n\n\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 16848 entries, 1 to 17783\nData columns (total 6 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   시군구별    16848 non-null  object\n 1   기간      16848 non-null  object\n 2   출생아수    16848 non-null  object\n 3   연도      16848 non-null  object\n 4   월       16848 non-null  object\n 5   성별      16848 non-null  object\ndtypes: object(6)\nmemory usage: 921.4+ KB\n\n\n\n# https://pandas.pydata.org/docs/user_guide/missing_data.html#values-considered-missing\ndf[\"출생아수\"] = df[\"출생아수\"].replace(\"-\", np.nan)\ndf[\"출생아수\"] = df[\"출생아수\"].astype(float)\ndf[\"출생아수\"].describe()\n\ncount    16308.000000\nmean      2898.333579\nstd       6406.925280\nmin         30.000000\n25%        589.000000\n50%        980.000000\n75%       1833.250000\nmax      63268.000000\nName: 출생아수, dtype: float64\n\n\n\ndf_all = df[(df[\"시군구별\"] == \"전국\") & (df[\"성별\"] == \"전체\")]\ndf_all.head(2)\n\n\n\n\n\n\n\n\n시군구별\n기간\n출생아수\n연도\n월\n성별\n\n\n\n\n1\n전국\n1997.01\n63268.0\n1997\n01\n전체\n\n\n58\n전국\n1997.02\n58144.0\n1997\n02\n전체\n\n\n\n\n\n\n\n\ndf_all = df_all[[\"연도\", \"월\", \"출생아수\"]].copy()\ndf_all.head()\n\n\n\n\n\n\n\n\n연도\n월\n출생아수\n\n\n\n\n1\n1997\n01\n63268.0\n\n\n58\n1997\n02\n58144.0\n\n\n115\n1997\n03\n62160.0\n\n\n172\n1997\n04\n56949.0\n\n\n229\n1997\n05\n55270.0\n\n\n\n\n\n\n\n\ndf_all.set_index([\"연도\", \"월\"]).plot(figsize=(15, 4))\n\n\n\n\n\n\n\n\n\ndf_all.groupby(\"연도\").sum().plot(figsize=(15, 4))\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(15, 4))\nsns.lineplot(data=df_all, x=\"연도\", y=\"출생아수\")",
    "crumbs": [
      "Home",
      "예제",
      "추천 시스템 스터디 실습 예제 1"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Study-SUSC",
    "section": "",
    "text": "이번 스터디에선 추천시스템에 대한 정의를 일반적1이고 학술적인 형태가 아닌 조작적으로 정의하도록 하겠습니다. 조작적 정의이기 때문에 어딘가서 아래와 같은 정의를 사용하실 때 주의하세요. 합의되지 않았습니다. 단지 “스터디”에 필요한 정의일 뿐입니다.\n\n[정의] 추천시스템은 여러 가능성 가운데, 몇가지 가치 있는 것을 선별, 그 중에서 \\(n\\)개를 선정하는 의사 결정을 도와주는 시스템 또는 방법\n\n\n여러 가능성 가운데, 몇가지 가치 있는 것을 선별\n\n가능성을 정의하는 기준에 따라 다양한 방법을 활용할 수 있는데, 단순한 방법(Top-K)에서, 복잡한 방법 등 가능성을 계산만 할 수 있다면 어떤 것도 가능\n\n그 중에서 \\(n\\)개를 선정\n\n목적에 맞춰 알고리즘을 적절하게 선택해서 사용\n\n의사 결정을 도와주는\n\n사용자의 의사 결정 과정에서 큰 영향력을 발휘하는게 목표로 선택한 항목을 사용자가 실제로 활용하는 것을 최종 목표로 함\n\n\n\n\n추천시스템의 기본적인 아이디어는 “다양한 데이터 소스를 활용해 고객의 관심을 추론”하는 것입니다. 과거 관심사와 성향이 미래 선택에 대한 좋은 방향성을 제시해주는 경우가 많기 때문에 추천에 관련된 분석은 흔히 사용자와 아이템 간의 “과거”의 상호작용에 기반한다고 가정하고 있습니다. 예외적으로 지식 기반 추천 시스템의 경우인데, 이때는 사용자의 과거 이력보다는 사용자가 지정한 요구 사항에 따라 제안됩니다. 따라서 모든 추천시스템의 시작은 “과거 데이터”와 “사용자 데이터”의 의존성을 가정하기 때문에, 해당 데이터를 다루는 것에서 시작됩니다.\n\n\n\n1990년대 인터넷의 발전과 함께 다양한 것이 정보화 되고 거기에 접근할 수 있게 되며 여러 후보가운데 가치 있는것을 선정하는 기술이 중요해졌습니다. 제록스 팔로알토 연구소의 연구자 골드버그(Goldberg)는 대표적인 추천 알고리즘의 하나인 협조필터링2을 처음으로 적용한 추천시스템을 제안하였습니다. 이 알고리즘은 전자 메일 중에서 유익한 메일을 선택하는 것으로, 필터 처리만으로는 유익한 메일을 찾아내는 것이 어렵기 때문에 협조 필터링을 사용한 메일 스코어링(scoring)을 계산하는 것이 핵심 골자입니다.\n대부분의 추천시스템은 이런 형태의 알고리즘을 필요로 합니다. 그리고 많은 문제는 주어진 알고리즘을 그대로 활용하기 보다는 적당한 수준에서 변경(trade-off)를 필요로 합니다. 따라서 많은 알고리즘을 알면 좋지만, 가장 널리 사용되는 알고리즘을 활용하는 것도 중요합니다.\n주어진 문제를 어떻게 해결할 것인가에 대해선 해당 문제를 해결하는 전문가의 몫이라 할 수 있습니다. 우리는 스터디를 진행하기 때문에 문제를 ‘잘’ 해결하는 것에 주력을 하는 것이 아니라, 문제를 해결하는 것에 집중하도록 하겠습니다. 그래서 가능하다면 널리 사용되는 알고리즘을 활용하는 방향으로 진행하도록 하겠습니다.\n\n\n\n일반적으로 추천 시스템은 입력-프로세스-출력의 3가지 요소로 정리할 수 있습니다. 당연한 이야기처럼 느껴지겠지만, 이런 분류를 이해하지 못하면 전혀 어뚱한 시스템을 설계하게 됩니다.\n\n입력\n\n콘텐츠 -&gt; 내용 기반 필터링(CBF)\n행위 -&gt; 협조 필터링(CF) -&gt; 콜드 스타트 문제\n\n프로세스\n\n경향성 -&gt; Top-K\n연관성 -&gt; 유사도 -&gt; {협조 or 내용}\n개인화 -&gt; 협조 필터\n\n출력\n\n빈도적 -&gt; 특징 시점\n즉시적 -&gt; 사이드바\n비즉시적 -&gt; 메일, 메시지\n\n\n[연습문제] 추천시스템이 검색시스템과 어떤 차이가 있나요?\n\n\n\n\n사용자\n\n서비스를 사용하는 사람 -아이템\n서비스에서 판매하는 물품\n다른 사용자\n\n[가정] 서비스가 성장하면 사용자/아이템도 함께 성장\n\n사용자 성장\n아이템 디스커버리\n\n모든 사용자가 검색을 하지 않음\n추천에 익숙해짐\n\n\n\n\n\n\n\n매칭 문제\n\n아이템 매칭\n어떻게 매칭할 것인가?\n\nTop-K\nLast-K\nC.F\nOrder\n\n부가 정보\n\n아이템 분류 체계\n사용자 프로파일\n\n개인정보(성별, 연령)\n아이템 정보(관심, 분류, 태그)\n\n기준\n\n클릭, 매출, 소비, 평점\n\n\n\n\n\n\n\n\n컨텐츠 기반(아이템 기반)\n\n비슷한 아이템을 기반으로 추천\n아이템 프로파일\n\n분류체게, 키워드 등\n텍스트 처리가 필요\n\n원핫 인코딩, TF-IDF, 임베딩…\n아이템 프로필을 행렬로 계산\n\n유사도 계산\n\nCosine, Pearson\n\n\n\n협업 필터링(평점 기반)\n\n다른 사용자들의 정보를 이용하여 내 취향을 예측\n\n사용자 기반\n아이템 기반\n\n결국은 행렬 계산\n\n사용자 기반\n\n나와 비슷한 평점 패턴을 보이는 사람들을 찾아서 그 사람들이 높게 평가한 아이템 추천\n\n아이템 기반\n\n평점의 패턴이 비슷한 아이템들을 찾아서 그걸 추천하는 방법\n\n\n\n사용자 행동 기반\n\n아이템 클릭 혹은 소비 정보를 기반으로 추천\n\n아이템의 부가 정보가 필요\n구현이 간단하지만, 아주 유용함\n\n모델링을 통해 사용자와 아이템 페어에 대한 클릭 확률 등의 점수 계산이 가능\n\n의사 결정 트리"
  },
  {
    "objectID": "index.html#추천시스템",
    "href": "index.html#추천시스템",
    "title": "Study-SUSC",
    "section": "",
    "text": "이번 스터디에선 추천시스템에 대한 정의를 일반적1이고 학술적인 형태가 아닌 조작적으로 정의하도록 하겠습니다. 조작적 정의이기 때문에 어딘가서 아래와 같은 정의를 사용하실 때 주의하세요. 합의되지 않았습니다. 단지 “스터디”에 필요한 정의일 뿐입니다.\n\n[정의] 추천시스템은 여러 가능성 가운데, 몇가지 가치 있는 것을 선별, 그 중에서 \\(n\\)개를 선정하는 의사 결정을 도와주는 시스템 또는 방법\n\n\n여러 가능성 가운데, 몇가지 가치 있는 것을 선별\n\n가능성을 정의하는 기준에 따라 다양한 방법을 활용할 수 있는데, 단순한 방법(Top-K)에서, 복잡한 방법 등 가능성을 계산만 할 수 있다면 어떤 것도 가능\n\n그 중에서 \\(n\\)개를 선정\n\n목적에 맞춰 알고리즘을 적절하게 선택해서 사용\n\n의사 결정을 도와주는\n\n사용자의 의사 결정 과정에서 큰 영향력을 발휘하는게 목표로 선택한 항목을 사용자가 실제로 활용하는 것을 최종 목표로 함\n\n\n\n\n추천시스템의 기본적인 아이디어는 “다양한 데이터 소스를 활용해 고객의 관심을 추론”하는 것입니다. 과거 관심사와 성향이 미래 선택에 대한 좋은 방향성을 제시해주는 경우가 많기 때문에 추천에 관련된 분석은 흔히 사용자와 아이템 간의 “과거”의 상호작용에 기반한다고 가정하고 있습니다. 예외적으로 지식 기반 추천 시스템의 경우인데, 이때는 사용자의 과거 이력보다는 사용자가 지정한 요구 사항에 따라 제안됩니다. 따라서 모든 추천시스템의 시작은 “과거 데이터”와 “사용자 데이터”의 의존성을 가정하기 때문에, 해당 데이터를 다루는 것에서 시작됩니다.\n\n\n\n1990년대 인터넷의 발전과 함께 다양한 것이 정보화 되고 거기에 접근할 수 있게 되며 여러 후보가운데 가치 있는것을 선정하는 기술이 중요해졌습니다. 제록스 팔로알토 연구소의 연구자 골드버그(Goldberg)는 대표적인 추천 알고리즘의 하나인 협조필터링2을 처음으로 적용한 추천시스템을 제안하였습니다. 이 알고리즘은 전자 메일 중에서 유익한 메일을 선택하는 것으로, 필터 처리만으로는 유익한 메일을 찾아내는 것이 어렵기 때문에 협조 필터링을 사용한 메일 스코어링(scoring)을 계산하는 것이 핵심 골자입니다.\n대부분의 추천시스템은 이런 형태의 알고리즘을 필요로 합니다. 그리고 많은 문제는 주어진 알고리즘을 그대로 활용하기 보다는 적당한 수준에서 변경(trade-off)를 필요로 합니다. 따라서 많은 알고리즘을 알면 좋지만, 가장 널리 사용되는 알고리즘을 활용하는 것도 중요합니다.\n주어진 문제를 어떻게 해결할 것인가에 대해선 해당 문제를 해결하는 전문가의 몫이라 할 수 있습니다. 우리는 스터디를 진행하기 때문에 문제를 ‘잘’ 해결하는 것에 주력을 하는 것이 아니라, 문제를 해결하는 것에 집중하도록 하겠습니다. 그래서 가능하다면 널리 사용되는 알고리즘을 활용하는 방향으로 진행하도록 하겠습니다.\n\n\n\n일반적으로 추천 시스템은 입력-프로세스-출력의 3가지 요소로 정리할 수 있습니다. 당연한 이야기처럼 느껴지겠지만, 이런 분류를 이해하지 못하면 전혀 어뚱한 시스템을 설계하게 됩니다.\n\n입력\n\n콘텐츠 -&gt; 내용 기반 필터링(CBF)\n행위 -&gt; 협조 필터링(CF) -&gt; 콜드 스타트 문제\n\n프로세스\n\n경향성 -&gt; Top-K\n연관성 -&gt; 유사도 -&gt; {협조 or 내용}\n개인화 -&gt; 협조 필터\n\n출력\n\n빈도적 -&gt; 특징 시점\n즉시적 -&gt; 사이드바\n비즉시적 -&gt; 메일, 메시지\n\n\n[연습문제] 추천시스템이 검색시스템과 어떤 차이가 있나요?\n\n\n\n\n사용자\n\n서비스를 사용하는 사람 -아이템\n서비스에서 판매하는 물품\n다른 사용자\n\n[가정] 서비스가 성장하면 사용자/아이템도 함께 성장\n\n사용자 성장\n아이템 디스커버리\n\n모든 사용자가 검색을 하지 않음\n추천에 익숙해짐\n\n\n\n\n\n\n\n매칭 문제\n\n아이템 매칭\n어떻게 매칭할 것인가?\n\nTop-K\nLast-K\nC.F\nOrder\n\n부가 정보\n\n아이템 분류 체계\n사용자 프로파일\n\n개인정보(성별, 연령)\n아이템 정보(관심, 분류, 태그)\n\n기준\n\n클릭, 매출, 소비, 평점\n\n\n\n\n\n\n\n\n컨텐츠 기반(아이템 기반)\n\n비슷한 아이템을 기반으로 추천\n아이템 프로파일\n\n분류체게, 키워드 등\n텍스트 처리가 필요\n\n원핫 인코딩, TF-IDF, 임베딩…\n아이템 프로필을 행렬로 계산\n\n유사도 계산\n\nCosine, Pearson\n\n\n\n협업 필터링(평점 기반)\n\n다른 사용자들의 정보를 이용하여 내 취향을 예측\n\n사용자 기반\n아이템 기반\n\n결국은 행렬 계산\n\n사용자 기반\n\n나와 비슷한 평점 패턴을 보이는 사람들을 찾아서 그 사람들이 높게 평가한 아이템 추천\n\n아이템 기반\n\n평점의 패턴이 비슷한 아이템들을 찾아서 그걸 추천하는 방법\n\n\n\n사용자 행동 기반\n\n아이템 클릭 혹은 소비 정보를 기반으로 추천\n\n아이템의 부가 정보가 필요\n구현이 간단하지만, 아주 유용함\n\n모델링을 통해 사용자와 아이템 페어에 대한 클릭 확률 등의 점수 계산이 가능\n\n의사 결정 트리"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Study-SUSC",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://files.grouplens.org/papers/Konstan-Summer-01↩︎\nhttps://dl.acm.org/doi/10.1145/138859.138867↩︎"
  },
  {
    "objectID": "note/part_01a.html",
    "href": "note/part_01a.html",
    "title": "추천 시스템 스터디 Part1(a,b)",
    "section": "",
    "text": "많은 데이터 분서가들은 “2024년 여름 트랜드는 무엇인가요?”라는 질문을 2023년 9월쯤에 받게됩니다. 이 질문에 답변은 쉽지만, 어렵습니다. 왜냐하면 2024년 여름 트랜드에 대한 하나의 거대한 합의가 이뤄진 시점이라면 잡지나, 특정 도메인 영역에 있는 전문가들에게 인터뷰를 통해서 쉽게 알아낼 수 있기 때문입니다. 문제는 그러한 답변을 데이터로 뒷받침하기 위해선 전혀 다른 고민이 필요하기 때문입니다. 모든 일의 시작은 질문을 하는 것에서 출발하고, 질문에 대한 대답을 하나의 가설로 가정하고, 그 가설에 적합한 자료를 찾아야 합니다. 모든 데이터 분석가들은 자신의 주장에 대해서 “검증 가능한 자료”와 “방법”을 제시해야 합니다. 어쩌면 이런 일은 AI 시대를 건너야 하는 모든 사람들의 숙명이 될지도 모릅니다.\n\n예제01. 검증을 위해서 우리가 해야 하는 행동\n\n백데이터 수집\n\n도메인 영역에서 가장 앞선 혹은 선행된 지표를 확인\n\n가설 검증\n\n검증해야 되는 대상을 정의\n검증방법을 결정\n\n\n전문가 집단 조사\n\n\n면담\n\n\n\n시각화를 통해서 자료를 수정\n담당자에게 여러분이 만든 자료를 설명해서 여러분의 의견을 전달\n\n유제01. “출생아수가 줄어들고 있습니다.”\n\n백데이터 수집\n\nKOSIS(국가 통계 포털)\n\n“출생아수가 줄어들고 있습니다”\n\n출생아수 =&gt; 태어나는 모든 아기\n줄어든다 =&gt; 시계열(특정 시점에서 특정 시점까지 기울기가 음수)\n\n시각화\n\n\n단순 시각화\n\n\n인터렉션\n\n\n전달\n\n줄어들고 있다(사실)\n“OO에서는 출생아수가 다른 OO에 비해서 완만하다”(의견)\n\n\n\n\n\n\n\n예제2. R 개발 환경은 어떻게 구성될까?\n\nR(언어), RStudio(IDE), renv(개발환경구성)\n\nR이 통계학에서 사용하는 좋은 패키지를 잔뜩 가지고 있음\nggplot이라고 하는 그래프 라이브러리도 있음\ndataframe이라고 하는 나름의 데이터구조도 활용할 수 있음\n\n\n유제2. Python 개발 환경은 어떻게 구성될까?\n\nPython(언어), VSCode/Colab/PyCharm(IDE), venv(개발환경구성)\n\nPython이 머신러닝/딥러닝에서 사용하는 좋은 라이브러리를 잔뜩 가지고 있음\nmatplotlib/seaborn/pyplot이라고 하는 그래프 라이브러리도 있음\nList/Dict라고하는 나름의 좋은 데이터구조를 가지고 있음\n\n\n연습1. Python 개발 환경은 어떻게 구성될까?\n\nPython(언어), VSCode, venv(개발환경구성) =&gt; 예, 문제가 없어요!\n\nPandas라고하는 좋은 분석도구를 사용\n\nSolve) 개발환경 구성\n\n1)Python, VSCode를 설치하세요.\n2)VSCode 실행 후에 File &gt; Open Folder를 이용해서 작업 환경을 구성하세요\n3)VSCode에 필요한 확장 프로그램(Python, Jupyter)를 설치하세요.\n5)View &gt; Command Palette &gt; Python: Create Envir...\n6)day01.ipynb(확장자!)를 만들어서, 커널을 선택하세요.\n7)print(\"Hello, World\") 실행 확인 하시면 됩니다.\n\n\n연습2. 데이터 분석 폴더\n\n모든 데이터는 data에 두도록 하세요.\n만들어진 모든 산출물은 output에 두도록 하세요.\n첨부되어진 모든 파일은 static 또는 files등을 활용하세요.\n\n연습3. 파이썬 패키지 설치\n\npip를 활용\n\npip list\npip freeze\npip install\n\npip install pandas\n\nnumpy&gt;=1.23.2\npython-dateutil&gt;=2.8.2\npytz&gt;=2020.1\ntzdata&gt;=2022.7\n\npip install seaborn\npip install openpyxl\n\n\n\n\n\n- a) VSCode가 문제다!\n    - VSCode가 \"텍스트 편집기\"\n    - VSCode에 확장 프로그램을 설치해서, 마치 IDE인 것처럼 사용\n- b) 아저씨, 저 파이썬이 이상해요!\n    - 아나콘다(Anaconda), 여러분이 뭘 필요로 하는지 모르지만, 모든 걸 다 설치해두었음\n- c) 이렇게 복잡하게 할 필요가 있나요?\n    - 재현 가능!",
    "crumbs": [
      "Home",
      "추천 시스템 스터디 Part1(a,b)"
    ]
  },
  {
    "objectID": "note/part_01a.html#재현-가능한-데이터-분석",
    "href": "note/part_01a.html#재현-가능한-데이터-분석",
    "title": "추천 시스템 스터디 Part1(a,b)",
    "section": "",
    "text": "많은 데이터 분서가들은 “2024년 여름 트랜드는 무엇인가요?”라는 질문을 2023년 9월쯤에 받게됩니다. 이 질문에 답변은 쉽지만, 어렵습니다. 왜냐하면 2024년 여름 트랜드에 대한 하나의 거대한 합의가 이뤄진 시점이라면 잡지나, 특정 도메인 영역에 있는 전문가들에게 인터뷰를 통해서 쉽게 알아낼 수 있기 때문입니다. 문제는 그러한 답변을 데이터로 뒷받침하기 위해선 전혀 다른 고민이 필요하기 때문입니다. 모든 일의 시작은 질문을 하는 것에서 출발하고, 질문에 대한 대답을 하나의 가설로 가정하고, 그 가설에 적합한 자료를 찾아야 합니다. 모든 데이터 분석가들은 자신의 주장에 대해서 “검증 가능한 자료”와 “방법”을 제시해야 합니다. 어쩌면 이런 일은 AI 시대를 건너야 하는 모든 사람들의 숙명이 될지도 모릅니다.\n\n예제01. 검증을 위해서 우리가 해야 하는 행동\n\n백데이터 수집\n\n도메인 영역에서 가장 앞선 혹은 선행된 지표를 확인\n\n가설 검증\n\n검증해야 되는 대상을 정의\n검증방법을 결정\n\n\n전문가 집단 조사\n\n\n면담\n\n\n\n시각화를 통해서 자료를 수정\n담당자에게 여러분이 만든 자료를 설명해서 여러분의 의견을 전달\n\n유제01. “출생아수가 줄어들고 있습니다.”\n\n백데이터 수집\n\nKOSIS(국가 통계 포털)\n\n“출생아수가 줄어들고 있습니다”\n\n출생아수 =&gt; 태어나는 모든 아기\n줄어든다 =&gt; 시계열(특정 시점에서 특정 시점까지 기울기가 음수)\n\n시각화\n\n\n단순 시각화\n\n\n인터렉션\n\n\n전달\n\n줄어들고 있다(사실)\n“OO에서는 출생아수가 다른 OO에 비해서 완만하다”(의견)\n\n\n\n\n\n\n\n예제2. R 개발 환경은 어떻게 구성될까?\n\nR(언어), RStudio(IDE), renv(개발환경구성)\n\nR이 통계학에서 사용하는 좋은 패키지를 잔뜩 가지고 있음\nggplot이라고 하는 그래프 라이브러리도 있음\ndataframe이라고 하는 나름의 데이터구조도 활용할 수 있음\n\n\n유제2. Python 개발 환경은 어떻게 구성될까?\n\nPython(언어), VSCode/Colab/PyCharm(IDE), venv(개발환경구성)\n\nPython이 머신러닝/딥러닝에서 사용하는 좋은 라이브러리를 잔뜩 가지고 있음\nmatplotlib/seaborn/pyplot이라고 하는 그래프 라이브러리도 있음\nList/Dict라고하는 나름의 좋은 데이터구조를 가지고 있음\n\n\n연습1. Python 개발 환경은 어떻게 구성될까?\n\nPython(언어), VSCode, venv(개발환경구성) =&gt; 예, 문제가 없어요!\n\nPandas라고하는 좋은 분석도구를 사용\n\nSolve) 개발환경 구성\n\n1)Python, VSCode를 설치하세요.\n2)VSCode 실행 후에 File &gt; Open Folder를 이용해서 작업 환경을 구성하세요\n3)VSCode에 필요한 확장 프로그램(Python, Jupyter)를 설치하세요.\n5)View &gt; Command Palette &gt; Python: Create Envir...\n6)day01.ipynb(확장자!)를 만들어서, 커널을 선택하세요.\n7)print(\"Hello, World\") 실행 확인 하시면 됩니다.\n\n\n연습2. 데이터 분석 폴더\n\n모든 데이터는 data에 두도록 하세요.\n만들어진 모든 산출물은 output에 두도록 하세요.\n첨부되어진 모든 파일은 static 또는 files등을 활용하세요.\n\n연습3. 파이썬 패키지 설치\n\npip를 활용\n\npip list\npip freeze\npip install\n\npip install pandas\n\nnumpy&gt;=1.23.2\npython-dateutil&gt;=2.8.2\npytz&gt;=2020.1\ntzdata&gt;=2022.7\n\npip install seaborn\npip install openpyxl\n\n\n\n\n\n- a) VSCode가 문제다!\n    - VSCode가 \"텍스트 편집기\"\n    - VSCode에 확장 프로그램을 설치해서, 마치 IDE인 것처럼 사용\n- b) 아저씨, 저 파이썬이 이상해요!\n    - 아나콘다(Anaconda), 여러분이 뭘 필요로 하는지 모르지만, 모든 걸 다 설치해두었음\n- c) 이렇게 복잡하게 할 필요가 있나요?\n    - 재현 가능!",
    "crumbs": [
      "Home",
      "추천 시스템 스터디 Part1(a,b)"
    ]
  },
  {
    "objectID": "practice/practice02.html",
    "href": "practice/practice02.html",
    "title": "추천 시스템 스터디 실습 예제 2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport koreanize_matplotlib\n\n\nimport statsmodels.api as sm\ntrans2022 = pd.read_excel(\n    \"data/raw-data.xlsx\", \"2022\", index_col=\"in/out\", na_values=[\"NA\"]\n)\npopulation = pd.read_excel(\"data/raw-data.xlsx\", \"population\", index_col=\"local/year\")\nbirth = pd.read_excel(\"data/raw-data.xlsx\", \"birth\", index_col=\"local/year\")\ndeath = pd.read_excel(\"data/raw-data.xlsx\", \"death\", index_col=\"local/year\")\ntrans2022.head()\n\n\n\n\n\n\n\n\nSeoul\nBusan\nDaegu\nIncheon\nGwangju\nDaejeon\nUlsan\nSejong\nGyeonggi\\n-do\nGangwon\\n-do\nChungcheong\\nbuk-do\nChungcheong\\nnam-do\nJeollabuk\\n-do\nJeollanam\\n-do\nGyeongsang\\nbuk-do\nGyeongsang\\nnam-do\nJeju-do\n\n\nin/out\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeoul\n523992\n10011\n6782\n32297\n5448\n8967\n3171\n3707\n201762\n15338\n10069\n14799\n8855\n8418\n9687\n9117\n6942\n\n\nBusan\n17668\n188193\n4101\n2284\n895\n1802\n7250\n629\n13168\n1573\n1612\n2306\n1130\n2533\n7073\n34238\n1928\n\n\nDaegu\n12887\n4413\n118457\n1654\n469\n1883\n2296\n642\n10564\n1329\n1752\n1971\n723\n817\n32032\n5922\n1053\n\n\nIncheon\n27438\n1702\n1196\n151238\n1154\n1927\n651\n678\n43640\n3954\n3208\n6182\n2322\n2353\n2660\n2104\n1645\n\n\nGwangju\n8958\n910\n459\n1540\n84311\n1244\n292\n466\n7504\n631\n819\n1598\n4151\n23237\n670\n888\n778\npopulation.head()\n\n\n\n\n\n\n\n\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n\n\nlocal/year\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeoul\n10195318\n10143645\n10103233\n10022181\n9930616\n9857426\n9765623\n9729107\n9668465\n9509458\n9428372\n\n\nBusan\n3538484\n3527635\n3519401\n3513777\n3498529\n3470653\n3441453\n3413841\n3391946\n3350380\n3317812\n\n\nDaegu\n2505644\n2501588\n2493264\n2487829\n2484557\n2475231\n2461769\n2438031\n2418346\n2385412\n2363691\n\n\nIncheon\n2843981\n2879782\n2902608\n2925815\n2943069\n2948542\n2954642\n2957026\n2942828\n2948375\n2967314\n\n\nGwangju\n1469216\n1472910\n1475884\n1472199\n1469214\n1463770\n1459336\n1456468\n1450062\n1441611\n1431050\nbirth.head()\n\n\n\n\n\n\n\n\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n\n\nlocal/year\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeoul\n93914\n84066\n83711\n83005\n75536\n65389\n58074\n53673\n47445\n45531\n42602\n\n\nBusan\n28673\n25831\n26190\n26645\n24906\n21480\n19152\n17049\n15058\n14446\n14134\n\n\nDaegu\n21472\n19340\n19361\n19438\n18298\n15946\n14400\n13233\n11193\n10661\n10134\n\n\nIncheon\n27781\n25560\n25786\n25491\n23609\n20445\n20087\n18522\n16040\n14947\n14464\n\n\nGwangju\n14392\n12729\n12729\n12441\n11580\n10120\n9105\n8364\n7318\n7956\n7446\ndeath.head()\n\n\n\n\n\n\n\n\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n\n\nlocal/year\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeoul\n41514\n42063\n42153\n43053\n43540\n42932\n45219\n43829\n45522\n48798\n55296\n\n\nBusan\n20534\n20096\n20230\n20820\n21074\n21434\n22570\n22260\n22950\n23531\n27713\n\n\nDaegu\n12352\n12531\n12642\n13081\n13502\n13629\n14070\n13752\n14460\n14560\n17592\n\n\nIncheon\n12881\n13039\n13409\n13452\n14119\n14290\n15316\n15131\n15689\n16493\n18957\n\n\nGwangju\n6874\n6891\n6935\n7443\n7247\n7560\n7781\n7635\n7785\n7981\n9350\npopulation2012 = population.iloc[:, 0]\npopulation2013 = population.iloc[:, 1]\npopulation2014 = population.iloc[:, 2]\npopulation2015 = population.iloc[:, 3]\npopulation2016 = population.iloc[:, 4]\npopulation2017 = population.iloc[:, 5]\npopulation2018 = population.iloc[:, 6]\npopulation2019 = population.iloc[:, 7]\npopulation2020 = population.iloc[:, 8]\npopulation2021 = population.iloc[:, 9]\npopulation2022 = population.iloc[:, 10]\n# for i in range(11):\n#     globals()[f\"population{2012+i}\"] = population.iloc[:, i]\nbirth2012 = birth.iloc[:, 0]\nbirth2013 = birth.iloc[:, 1]\nbirth2014 = birth.iloc[:, 2]\nbirth2015 = birth.iloc[:, 3]\nbirth2016 = birth.iloc[:, 4]\nbirth2017 = birth.iloc[:, 5]\nbirth2018 = birth.iloc[:, 6]\nbirth2019 = birth.iloc[:, 7]\nbirth2020 = birth.iloc[:, 8]\nbirth2021 = birth.iloc[:, 9]\nbirth2022 = birth.iloc[:, 10]\ndeath2012 = death.iloc[:, 0]\ndeath2013 = death.iloc[:, 1]\ndeath2014 = death.iloc[:, 2]\ndeath2015 = death.iloc[:, 3]\ndeath2016 = death.iloc[:, 4]\ndeath2017 = death.iloc[:, 5]\ndeath2018 = death.iloc[:, 6]\ndeath2019 = death.iloc[:, 7]\ndeath2020 = death.iloc[:, 8]\ndeath2021 = death.iloc[:, 9]\ndeath2022 = death.iloc[:, 10]\ntrans2012 = pd.read_excel(\n    \"data/raw-data.xlsx\", \"2012\", index_col=\"in/out\", na_values=[\"NA\"]\n)\ntrans2013 = pd.read_excel(\n    \"data/raw-data.xlsx\", \"2013\", index_col=\"in/out\", na_values=[\"NA\"]\n)\ntrans2014 = pd.read_excel(\n    \"data/raw-data.xlsx\", \"2014\", index_col=\"in/out\", na_values=[\"NA\"]\n)\ntrans2015 = pd.read_excel(\n    \"data/raw-data.xlsx\", \"2015\", index_col=\"in/out\", na_values=[\"NA\"]\n)\ntrans2016 = pd.read_excel(\n    \"data/raw-data.xlsx\", \"2016\", index_col=\"in/out\", na_values=[\"NA\"]\n)\ntrans2017 = pd.read_excel(\n    \"data/raw-data.xlsx\", \"2017\", index_col=\"in/out\", na_values=[\"NA\"]\n)\ntrans2018 = pd.read_excel(\n    \"data/raw-data.xlsx\", \"2018\", index_col=\"in/out\", na_values=[\"NA\"]\n)\ntrans2019 = pd.read_excel(\n    \"data/raw-data.xlsx\", \"2019\", index_col=\"in/out\", na_values=[\"NA\"]\n)\ntrans2020 = pd.read_excel(\n    \"data/raw-data.xlsx\", \"2020\", index_col=\"in/out\", na_values=[\"NA\"]\n)\ntrans2021 = pd.read_excel(\n    \"data/raw-data.xlsx\", \"2021\", index_col=\"in/out\", na_values=[\"NA\"]\n)\ntrans2022 = pd.read_excel(\n    \"data/raw-data.xlsx\", \"2022\", index_col=\"in/out\", na_values=[\"NA\"]\n)",
    "crumbs": [
      "Home",
      "예제",
      "추천 시스템 스터디 실습 예제 2"
    ]
  },
  {
    "objectID": "practice/practice02.html#분석",
    "href": "practice/practice02.html#분석",
    "title": "추천 시스템 스터디 실습 예제 2",
    "section": "분석",
    "text": "분석\n\n시도별 2012년 인구 이동, 시도별 인구, 시도별 출생, 시도별 사망에 대한 데이터를 로드한다. 일부 데이터를 시각화\nPandas는 다양한 시각화 도구를 제공, 아주 세밀하거나 대화형 시각화는 일부 부족한 면이 있지만 데이터의 경향이나 분포를 파악하는데 부가 작업이 필요 없이 사용할 수 있다는 장점\n\n\nbirth.plot(kind=\"bar\", figsize=(12, 10), title=\"Birth\")\n\n\n\n\n\n\n\n\n\ndeath.plot(kind=\"bar\", figsize=(12, 10), title=\"Death\")\n\n\n\n\n\n\n\n\n\n2012년 이후, 서울, 경기도, 경상남도 등에서 출생 명수가 줄어드는 것이 확연 =&gt; 시도별은?\n\n\npopulation.plot(kind=\"bar\", figsize=(12, 10), title=\"Population\")\n\n\n\n\n\n\n\n\n\n2014년 서울 인구는 감소하고 인천 경기도 그리고 세종은 인구가 증가\n이외 다른 시도는 큰 변경이 없음 =&gt; 서울에서 경기나 인천으로 이동했을 것으로 추정 =&gt; 증가분과 감소분이 차이가 있어 보임\n2014년에서 2013년 인구의 차이를 구해보자.\n\n\npopulation2014 - population2013\n\nlocal/year\nSeoul                -40412\nBusan                 -8234\nDaegu                 -8324\nIncheon               22826\nGwangju                2974\nDaejeon               -1002\nUlsan                  9897\nSejong                33972\nGyeonggi-do          123200\nGangwon-do             2179\nChungcheongbuk-do      6201\nChungcheongnam-do     14642\nJeollabuk-do          -1405\nJeollanam-do          -1392\nGyeongsangbuk-do       1354\nGyeongsangnam-do      16437\nJeju-do               13540\ndtype: int64\n\n\n\n서울은 4만명이 줄어든 반면, 인천, 경기도는 각각 2만, 13만명이 늘었음\n좀 더 다각적인 데이터를 확인하기 위해서 출생자 수에서 사망자 수를 합하면, 순수 증감수를 알 수 있음\n\n\nbirth - death\n\n\n\n\n\n\n\n\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n\n\nlocal/year\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeoul\n52400\n42003\n41558\n39952\n31996\n22457\n12855\n9844\n1923\n-3267\n-12694\n\n\nBusan\n8139\n5735\n5960\n5825\n3832\n46\n-3418\n-5211\n-7892\n-9085\n-13579\n\n\nDaegu\n9120\n6809\n6719\n6357\n4796\n2317\n330\n-519\n-3267\n-3899\n-7458\n\n\nIncheon\n14900\n12521\n12377\n12039\n9490\n6155\n4771\n3391\n351\n-1546\n-4493\n\n\nGwangju\n7518\n5838\n5794\n4998\n4333\n2560\n1324\n729\n-467\n-25\n-1904\n\n\nDaejeon\n8699\n7465\n7398\n6813\n5478\n3822\n1934\n908\n-91\n-475\n-1625\n\n\nUlsan\n7593\n6459\n6861\n6817\n5963\n4495\n2800\n2271\n1315\n634\n-970\n\n\nSejong\n234\n299\n491\n1729\n2232\n2345\n2444\n2598\n2151\n2216\n1531\n\n\nGyeonggi-do\n73916\n61170\n60744\n60490\n50428\n37236\n28125\n22630\n14943\n8740\n-3687\n\n\nGangwon-do\n1396\n224\n-342\n-372\n-1379\n-2587\n-3625\n-3623\n-4347\n-5392\n-7808\n\n\nChungcheongbuk-do\n4661\n3287\n3192\n2925\n1955\n290\n-748\n-2030\n-2987\n-3751\n-6656\n\n\nChungcheongnam-do\n6454\n4774\n4051\n4135\n2702\n349\n-1422\n-2368\n-4072\n-5342\n-9498\n\n\nJeollabuk-do\n2538\n1063\n668\n366\n-1364\n-2947\n-4551\n-5554\n-6526\n-7574\n-10820\n\n\nJeollanam-do\n224\n-931\n-1236\n-1482\n-2581\n-4494\n-5981\n-5955\n-7698\n-9138\n-12988\n\n\nGyeongsangbuk-do\n3991\n1961\n1758\n1448\n-362\n-3321\n-6210\n-7231\n-9926\n-10883\n-16529\n\n\nGyeongsangnam-do\n12792\n9510\n9524\n8224\n5945\n2215\n-1495\n-2855\n-6058\n-7830\n-13368\n\n\nJeju-do\n2754\n2011\n2226\n2261\n1952\n1299\n869\n541\n37\n-501\n-1207\n\n\n\n\n\n\n\n\n(birth - death).plot(kind=\"bar\", figsize=(12, 10), title=\"Population\")\n\n\n\n\n\n\n\n\n\n2014년 서울에서 출생, 사망으로 증가한 인구수는 4만명 증가했지만, 결과적으로 2013년보다 줄어듬\n경기도는 출생, 사망으로 6만600명이 증가했기 때문에 외부에서 6만명이 추가적으로 유입\n추가적으로 강원도는 300명 출생수보다 사망자수가 더 많아 인구가 줄어들 수 있는 지역임을 알 수 있음\n전체 데이터를 시각적으로 확인하기 위해서 전체 인구로 각 시도 인구를 나누면 각 지역에 백분율 비율을 구할 수 있음\n\n\npopulation2012_pie = population2012.astype(float) / population2012.sum() * 100\npopulation2012_pie.plot(\n    kind=\"pie\", autopct=\"%.2f\", figsize=(8, 8), title=\"2012 Population\"\n)\n\n\n\n\n\n\n\n\n\n서울, 경기도, 인천의 합이 약 50%\n같은 방법으로 2022년 시도별 인구 비율 구하면, 2012년과 2022년에서 가장 변화가 큰 시도를 구할 수 있음\n\n\npopulation2022_pie = population2022.astype(float) / population2022.sum() * 100\npopulation2022_pie.plot(\n    kind=\"pie\", autopct=\"%.2f\", figsize=(8, 8), title=\"2022 Population\"\n)\n\n\n\n\n\n\n\n\n\n인구 비율로, 서울은 가장 감소가 큰 지역이며, 경기도는 가장 증가가 큰 지역이다. 서울을 중심으로 한 지역 편중은 사라지지 않고 있으며, 서울을 중심으로 경기도 지역으로 인구 이동이 있다는 점을 유추할 수 있음\n\n\npopulation2022_pie - population2012_pie\n\nlocal/year\nSeoul               -1.681901\nBusan               -0.495260\nDaegu               -0.322885\nIncheon              0.186508\nGwangju             -0.101710\nDaejeon             -0.181179\nUlsan               -0.092622\nSejong               0.523696\nGyeonggi-do          2.682093\nGangwon-do          -0.032958\nChungcheongbuk-do    0.027895\nChungcheongnam-do    0.145255\nJeollabuk-do        -0.236745\nJeollanam-do        -0.214459\nGyeongsangbuk-do    -0.240777\nGyeongsangnam-do    -0.137628\nJeju-do              0.172677\ndtype: float64",
    "crumbs": [
      "Home",
      "예제",
      "추천 시스템 스터디 실습 예제 2"
    ]
  },
  {
    "objectID": "practice/practice02.html#예측",
    "href": "practice/practice02.html#예측",
    "title": "추천 시스템 스터디 실습 예제 2",
    "section": "예측",
    "text": "예측\n\npd.set_option(\"display.precision\", 2)\npd.set_option(\"display.float_format\", lambda x: f\"{x:,.2f}\")\n\n\n회귀분석은 주어진 속성(입력 변수)와 목적 변수가 긴밀하게 관계돼 있을 때, 사용할 수 있는 방법으로 관찰된 현상과 그 현상에 영향을 미치는 변수들간의 통계 모델을 만들고, 모델로 새로운 입력 변수에 따른 목적 변수를 예측하는 분석법\n회귀 분석으로 2023년, 2024년 인구를 예측\n\n먼저, 회귀분석으로 예측하기 위해 statsmodels 라이브러리를 사용\nstatsmodels 라이브러리는 일반최소제곱(Ordinary Least Squares) 기법을 제공\n\n간단한 f를 정의\n\nt = 전체 : pop2022 - pop2021\n\ni = 서울로 들어 오는 인구 : trans2022\no = 서울로 나가는 인구 : trans2022\nb = 서울에서 태어난 인구 : brith2022\nd = 서울에서 사망한 인구 : death2022\n\n\n\n\ns2022 = population2022[\"Seoul\"]\ns2021 = population2021[\"Seoul\"]\nprint(s2022, s2021)\nprint(s2022 - s2021)\n\n9428372 9509458\n-81086\n\n\n\ni = trans2022.loc[\"Seoul\", :].sum()\no = trans2022.loc[:, \"Seoul\"].sum()\n(i, o)\ni - o\n\nnp.int64(-8822)\n\n\n\nb = birth2022[\"Seoul\"]\nd = death2022[\"Seoul\"]\n(b, d)\n\n(np.int64(42602), np.int64(55296))\n\n\n\n(s2022 - s2021 + (i - o + b - d))\n\nnp.int64(-102602)\n\n\n\npopulation.sum()\n\n2012    50948272\n2013    51141463\n2014    51327916\n2015    51529338\n2016    51696216\n2017    51778544\n2018    51826059\n2019    51849861\n2020    51829023\n2021    51638809\n2022    51439038\ndtype: int64\n\n\n\ndef predict(df, year):\n    X = np.array(range(2012, 2023))\n    X = sm.add_constant(X)\n    n, m = df.shape\n    l = []\n    for i in range(0, n):\n        y = df.iloc[i, :].values\n        est = sm.OLS(y, X).fit()\n        l.append(float(est.predict(np.array([1, year]))))\n    return pd.Series(l, index=df.index)\n\n\npopulation_predict = population.copy()\npopulation_predict[\"2023\"] = predict(population, 2023)\npopulation_predict[\"2024\"] = predict(population, 2024)\nprint(population_predict.sum())\n\n2012   50,948,272.00\n2013   51,141,463.00\n2014   51,327,916.00\n2015   51,529,338.00\n2016   51,696,216.00\n2017   51,778,544.00\n2018   51,826,059.00\n2019   51,849,861.00\n2020   51,829,023.00\n2021   51,638,809.00\n2022   51,439,038.00\n2023   51,912,272.13\n2024   51,973,339.62\ndtype: float64\n\n\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\2056355179.py:9: DeprecationWarning: Conversion of an array with ndim &gt; 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n  l.append(float(est.predict(np.array([1, year]))))\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\2056355179.py:9: DeprecationWarning: Conversion of an array with ndim &gt; 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n  l.append(float(est.predict(np.array([1, year]))))\n\n\n\npopulation_predict\n\n\n\n\n\n\n\n\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n2023\n2024\n\n\nlocal/year\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeoul\n10195318\n10143645\n10103233\n10022181\n9930616\n9857426\n9765623\n9729107\n9668465\n9509458\n9428372\n9,390,662.75\n9,314,054.35\n\n\nBusan\n3538484\n3527635\n3519401\n3513777\n3498529\n3470653\n3441453\n3413841\n3391946\n3350380\n3317812\n3,319,354.11\n3,297,065.99\n\n\nDaegu\n2505644\n2501588\n2493264\n2487829\n2484557\n2475231\n2461769\n2438031\n2418346\n2385412\n2363691\n2,372,945.25\n2,359,112.46\n\n\nIncheon\n2843981\n2879782\n2902608\n2925815\n2943069\n2948542\n2954642\n2957026\n2942828\n2948375\n2967314\n2,987,763.38\n2,997,633.31\n\n\nGwangju\n1469216\n1472910\n1475884\n1472199\n1469214\n1463770\n1459336\n1456468\n1450062\n1441611\n1431050\n1,436,438.25\n1,432,485.24\n\n\nDaejeon\n1524583\n1532811\n1531809\n1518775\n1514370\n1502227\n1489936\n1474870\n1463882\n1452251\n1446072\n1,439,372.18\n1,430,001.09\n\n\nUlsan\n1147256\n1156480\n1166377\n1173534\n1172304\n1165132\n1155623\n1148019\n1136017\n1121592\n1110663\n1,124,019.29\n1,119,643.76\n\n\nSejong\n113117\n122153\n156125\n210884\n243048\n280100\n314126\n340575\n355831\n371895\n383591\n441,817.69\n471,644.20\n\n\nGyeonggi-do\n12093299\n12234630\n12357830\n12522606\n12716780\n12873895\n13077153\n13239666\n13427014\n13565450\n13589432\n13,852,849.91\n14,014,722.55\n\n\nGangwon-do\n1538630\n1542263\n1544442\n1549507\n1550806\n1550142\n1543052\n1541502\n1542840\n1538492\n1536498\n1,540,507.78\n1,540,014.02\n\n\nChungcheongbuk-do\n1565628\n1572732\n1578933\n1583952\n1591625\n1594432\n1599252\n1600007\n1600837\n1597427\n1595058\n1,608,246.40\n1,611,440.75\n\n\nChungcheongnam-do\n2028777\n2047631\n2062273\n2077649\n2096727\n2116770\n2126282\n2123709\n2121029\n2119257\n2123037\n2,152,417.20\n2,162,014.90\n\n\nJeollabuk-do\n1873341\n1872965\n1871560\n1869711\n1864791\n1854607\n1836832\n1818917\n1804104\n1786855\n1769607\n1,773,297.73\n1,762,433.86\n\n\nJeollanam-do\n1909618\n1907172\n1905780\n1908996\n1903914\n1896424\n1882970\n1868745\n1851549\n1832803\n1817697\n1,824,812.36\n1,815,528.55\n\n\nGyeongsangbuk-do\n2698353\n2699440\n2700794\n2702826\n2700398\n2691706\n2676831\n2665836\n2639422\n2626609\n2600492\n2,615,030.16\n2,605,372.96\n\n\nGyeongsangnam-do\n3319314\n3333820\n3350257\n3364702\n3373871\n3380404\n3373988\n3362553\n3340216\n3314183\n3280493\n3,328,147.89\n3,325,357.37\n\n\nJeju-do\n583713\n593806\n607346\n624395\n641597\n657083\n667191\n670989\n674635\n676759\n678159\n704,589.78\n714,814.25\n\n\n\n\n\n\n\n\npopulation_predict.plot(kind=\"bar\", figsize=(12, 10), title=\"Population 2023, 2024\")\n\n\n\n\n\n\n\n\n\nbirth_predict = birth.copy()\nbirth_predict[\"2023\"] = predict(birth, 2023)\nbirth_predict[\"2024\"] = predict(birth, 2024)\nbirth_predict\n\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\2056355179.py:9: DeprecationWarning: Conversion of an array with ndim &gt; 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n  l.append(float(est.predict(np.array([1, year]))))\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\2056355179.py:9: DeprecationWarning: Conversion of an array with ndim &gt; 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n  l.append(float(est.predict(np.array([1, year]))))\n\n\n\n\n\n\n\n\n\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n2023\n2024\n\n\nlocal/year\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeoul\n93914\n84066\n83711\n83005\n75536\n65389\n58074\n53673\n47445\n45531\n42602\n34,142.87\n28,728.11\n\n\nBusan\n28673\n25831\n26190\n26645\n24906\n21480\n19152\n17049\n15058\n14446\n14134\n11,601.62\n9,996.37\n\n\nDaegu\n21472\n19340\n19361\n19438\n18298\n15946\n14400\n13233\n11193\n10661\n10134\n8,558.65\n7,356.67\n\n\nIncheon\n27781\n25560\n25786\n25491\n23609\n20445\n20087\n18522\n16040\n14947\n14464\n12,662.82\n11,247.05\n\n\nGwangju\n14392\n12729\n12729\n12441\n11580\n10120\n9105\n8364\n7318\n7956\n7446\n5,979.05\n5,245.56\n\n\nDaejeon\n15279\n14099\n13962\n13774\n12436\n10851\n9337\n8410\n7481\n7414\n7677\n5,628.00\n4,736.91\n\n\nUlsan\n12160\n11330\n11556\n11732\n10910\n9381\n8149\n7539\n6617\n6127\n5399\n4,777.40\n4,044.85\n\n\nSejong\n1054\n1111\n1344\n2708\n3297\n3504\n3703\n3819\n3468\n3570\n3209\n4,413.96\n4,683.15\n\n\nGyeonggi-do\n124746\n112129\n112169\n113495\n105643\n94088\n88175\n83198\n77737\n76139\n75323\n65,398.38\n60,194.45\n\n\nGangwon-do\n12426\n10980\n10662\n10929\n10058\n8958\n8351\n8283\n7835\n7357\n7278\n6,335.44\n5,828.96\n\n\nChungcheongbuk-do\n15139\n13658\n13366\n13563\n12742\n11394\n10586\n9333\n8607\n8190\n7452\n6,628.18\n5,853.64\n\n\nChungcheongnam-do\n20448\n18628\n18200\n18604\n17302\n15670\n14380\n13228\n11950\n10984\n10221\n9,194.00\n8,156.41\n\n\nJeollabuk-do\n16238\n14555\n14231\n14087\n12698\n11348\n10001\n8971\n8165\n7475\n7032\n5,592.25\n4,633.37\n\n\nJeollanam-do\n16990\n15401\n14817\n15061\n13980\n12354\n11238\n10832\n9738\n8430\n7888\n6,984.58\n6,077.03\n\n\nGyeongsangbuk-do\n24635\n22206\n22062\n22310\n20616\n17957\n16079\n14472\n12873\n12045\n11311\n9,412.69\n8,003.20\n\n\nGyeongsangnam-do\n33211\n29504\n29763\n29537\n27138\n23849\n21224\n19250\n16823\n15562\n14017\n11,786.40\n9,813.25\n\n\nJeju-do\n5992\n5328\n5526\n5600\n5494\n5037\n4781\n4500\n3989\n3728\n3599\n3,458.24\n3,222.88\n\n\n\n\n\n\n\n\nprint(birth_predict.sum())\nbirth_predict.plot(kind=\"bar\", figsize=(12, 10), title=\"birth 2023, 2024\")\n\n2012   484,550.00\n2013   436,455.00\n2014   435,435.00\n2015   438,420.00\n2016   406,243.00\n2017   357,771.00\n2018   326,822.00\n2019   302,676.00\n2020   272,337.00\n2021   260,562.00\n2022   249,186.00\n2023   212,554.55\n2024   187,821.86\ndtype: float64\n\n\n\n\n\n\n\n\n\n\n2022년 총 출생자 수는 249,186명으로, 2012년 20만 명이상 감소\n2024년은 2022년 기준으로 약 6만명 감소\n시도별 인구 이동을 기반으로 시도별 인구 분포를 예측\n\n마코프 체인을 활용\n마코프 체인은 단위 시간에 따른 상태 변화를 나타내는데, 매 단위 시간마다 상태가 변이되거나 유지되며, 상태 변이를 전이라 함\n전이는 상태전이확률(state transition probability) 행렬로 나타내며, 이를 바탕으로 변화를 예측\n현재 상태에서 다음 상태로 전이될 때 이 상태전이확률로 확률적으로 전이\n2014년 각 시도의 이동 인구는 상태전이확률로 나타낼 수 있다. 즉, 2014년 서울에서 이동하여 다른 시도로 이동할 확률은 서울에서 떠난 전인구로 각 시도로 이동한 인구를 나누면, 상태전이확률을 구할 수 있음\n각 시도도 마찬가지로 시도에서 전출한 총인구를 각 다른 시도로 전입한 인구를 나누면 됨\n\n\n\ntrans2022_percent = trans2022.copy()\nfor i in range(0, 17):\n    trans2022_percent.iloc[:, i] = (\n        trans2022.iloc[:, i].astype(float) / trans2022.iloc[:, i].sum()\n    )\ntrans2022_percent\n\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.59\nBusan               0.02\nDaegu               0.01\nIncheon             0.03\nGwangju             0.01\nDaejeon             0.01\nUlsan               0.01\nSejong              0.00\nGyeonggi-do         0.20\nGangwon-do          0.02\nChungcheongbuk-do   0.01\nChungcheongnam-do   0.02\nJeollabuk-do        0.01\nJeollanam-do        0.01\nGyeongsangbuk-do    0.02\nGyeongsangnam-do    0.02\nJeju-do             0.01\nName: Seoul, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.04\nBusan               0.68\nDaegu               0.02\nIncheon             0.01\nGwangju             0.00\nDaejeon             0.01\nUlsan               0.03\nSejong              0.00\nGyeonggi-do         0.03\nGangwon-do          0.00\nChungcheongbuk-do   0.00\nChungcheongnam-do   0.01\nJeollabuk-do        0.00\nJeollanam-do        0.01\nGyeongsangbuk-do    0.03\nGyeongsangnam-do    0.13\nJeju-do             0.01\nName: Busan, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.04\nBusan               0.02\nDaegu               0.64\nIncheon             0.01\nGwangju             0.00\nDaejeon             0.01\nUlsan               0.01\nSejong              0.00\nGyeonggi-do         0.04\nGangwon-do          0.01\nChungcheongbuk-do   0.01\nChungcheongnam-do   0.01\nJeollabuk-do        0.00\nJeollanam-do        0.00\nGyeongsangbuk-do    0.16\nGyeongsangnam-do    0.04\nJeju-do             0.00\nName: Daegu, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.12\nBusan               0.01\nDaegu               0.01\nIncheon             0.57\nGwangju             0.01\nDaejeon             0.01\nUlsan               0.00\nSejong              0.00\nGyeonggi-do         0.19\nGangwon-do          0.01\nChungcheongbuk-do   0.01\nChungcheongnam-do   0.02\nJeollabuk-do        0.01\nJeollanam-do        0.01\nGyeongsangbuk-do    0.01\nGyeongsangnam-do    0.01\nJeju-do             0.01\nName: Incheon, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.04\nBusan               0.01\nDaegu               0.00\nIncheon             0.01\nGwangju             0.64\nDaejeon             0.01\nUlsan               0.00\nSejong              0.00\nGyeonggi-do         0.04\nGangwon-do          0.00\nChungcheongbuk-do   0.00\nChungcheongnam-do   0.01\nJeollabuk-do        0.03\nJeollanam-do        0.18\nGyeongsangbuk-do    0.00\nGyeongsangnam-do    0.01\nJeju-do             0.01\nName: Gwangju, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.06\nBusan               0.01\nDaegu               0.01\nIncheon             0.01\nGwangju             0.01\nDaejeon             0.57\nUlsan               0.00\nSejong              0.03\nGyeonggi-do         0.07\nGangwon-do          0.01\nChungcheongbuk-do   0.05\nChungcheongnam-do   0.08\nJeollabuk-do        0.03\nJeollanam-do        0.01\nGyeongsangbuk-do    0.02\nGyeongsangnam-do    0.02\nJeju-do             0.00\nName: Daejeon, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.04\nBusan               0.09\nDaegu               0.03\nIncheon             0.01\nGwangju             0.00\nDaejeon             0.01\nUlsan               0.60\nSejong              0.00\nGyeonggi-do         0.04\nGangwon-do          0.01\nChungcheongbuk-do   0.01\nChungcheongnam-do   0.01\nJeollabuk-do        0.01\nJeollanam-do        0.01\nGyeongsangbuk-do    0.07\nGyeongsangnam-do    0.07\nJeju-do             0.01\nName: Ulsan, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.09\nBusan               0.02\nDaegu               0.02\nIncheon             0.02\nGwangju             0.01\nDaejeon             0.16\nUlsan               0.01\nSejong              0.33\nGyeonggi-do         0.10\nGangwon-do          0.01\nChungcheongbuk-do   0.08\nChungcheongnam-do   0.09\nJeollabuk-do        0.02\nJeollanam-do        0.01\nGyeongsangbuk-do    0.02\nGyeongsangnam-do    0.02\nJeju-do             0.01\nName: Sejong, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.18\nBusan               0.01\nDaegu               0.01\nIncheon             0.04\nGwangju             0.01\nDaejeon             0.01\nUlsan               0.00\nSejong              0.00\nGyeonggi-do         0.63\nGangwon-do          0.02\nChungcheongbuk-do   0.01\nChungcheongnam-do   0.02\nJeollabuk-do        0.01\nJeollanam-do        0.01\nGyeongsangbuk-do    0.01\nGyeongsangnam-do    0.01\nJeju-do             0.01\nName: Gyeonggi\\n-do, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.11\nBusan               0.01\nDaegu               0.01\nIncheon             0.03\nGwangju             0.00\nDaejeon             0.01\nUlsan               0.00\nSejong              0.00\nGyeonggi-do         0.16\nGangwon-do          0.57\nChungcheongbuk-do   0.02\nChungcheongnam-do   0.02\nJeollabuk-do        0.01\nJeollanam-do        0.01\nGyeongsangbuk-do    0.02\nGyeongsangnam-do    0.01\nJeju-do             0.00\nName: Gangwon\\n-do, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.07\nBusan               0.01\nDaegu               0.01\nIncheon             0.02\nGwangju             0.01\nDaejeon             0.05\nUlsan               0.01\nSejong              0.02\nGyeonggi-do         0.13\nGangwon-do          0.02\nChungcheongbuk-do   0.55\nChungcheongnam-do   0.04\nJeollabuk-do        0.01\nJeollanam-do        0.01\nGyeongsangbuk-do    0.03\nGyeongsangnam-do    0.02\nJeju-do             0.00\nName: Chungcheong\\nbuk-do, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.08\nBusan               0.01\nDaegu               0.01\nIncheon             0.03\nGwangju             0.01\nDaejeon             0.06\nUlsan               0.01\nSejong              0.02\nGyeonggi-do         0.16\nGangwon-do          0.01\nChungcheongbuk-do   0.03\nChungcheongnam-do   0.50\nJeollabuk-do        0.02\nJeollanam-do        0.01\nGyeongsangbuk-do    0.02\nGyeongsangnam-do    0.02\nJeju-do             0.00\nName: Chungcheong\\nnam-do, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.06\nBusan               0.01\nDaegu               0.00\nIncheon             0.02\nGwangju             0.03\nDaejeon             0.02\nUlsan               0.00\nSejong              0.01\nGyeonggi-do         0.08\nGangwon-do          0.01\nChungcheongbuk-do   0.01\nChungcheongnam-do   0.03\nJeollabuk-do        0.68\nJeollanam-do        0.03\nGyeongsangbuk-do    0.01\nGyeongsangnam-do    0.01\nJeju-do             0.00\nName: Jeollabuk\\n-do, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.06\nBusan               0.02\nDaegu               0.01\nIncheon             0.02\nGwangju             0.16\nDaejeon             0.01\nUlsan               0.00\nSejong              0.00\nGyeonggi-do         0.07\nGangwon-do          0.01\nChungcheongbuk-do   0.01\nChungcheongnam-do   0.01\nJeollabuk-do        0.03\nJeollanam-do        0.56\nGyeongsangbuk-do    0.01\nGyeongsangnam-do    0.02\nJeju-do             0.01\nName: Jeollanam\\n-do, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.05\nBusan               0.03\nDaegu               0.16\nIncheon             0.01\nGwangju             0.00\nDaejeon             0.01\nUlsan               0.03\nSejong              0.00\nGyeonggi-do         0.07\nGangwon-do          0.01\nChungcheongbuk-do   0.01\nChungcheongnam-do   0.01\nJeollabuk-do        0.01\nJeollanam-do        0.01\nGyeongsangbuk-do    0.54\nGyeongsangnam-do    0.04\nJeju-do             0.00\nName: Gyeongsang\\nbuk-do, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.04\nBusan               0.14\nDaegu               0.02\nIncheon             0.01\nGwangju             0.00\nDaejeon             0.01\nUlsan               0.02\nSejong              0.00\nGyeonggi-do         0.04\nGangwon-do          0.01\nChungcheongbuk-do   0.01\nChungcheongnam-do   0.01\nJeollabuk-do        0.01\nJeollanam-do        0.01\nGyeongsangbuk-do    0.03\nGyeongsangnam-do    0.63\nJeju-do             0.01\nName: Gyeongsang\\nnam-do, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\nC:\\Users\\sigma\\AppData\\Local\\Temp\\ipykernel_7820\\4015714302.py:3: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'in/out\nSeoul               0.11\nBusan               0.03\nDaegu               0.02\nIncheon             0.03\nGwangju             0.01\nDaejeon             0.01\nUlsan               0.01\nSejong              0.00\nGyeonggi-do         0.12\nGangwon-do          0.01\nChungcheongbuk-do   0.01\nChungcheongnam-do   0.01\nJeollabuk-do        0.01\nJeollanam-do        0.01\nGyeongsangbuk-do    0.02\nGyeongsangnam-do    0.02\nJeju-do             0.57\nName: Jeju-do, dtype: float64' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  trans2022_percent.iloc[:, i] = (\n\n\n\n\n\n\n\n\n\nSeoul\nBusan\nDaegu\nIncheon\nGwangju\nDaejeon\nUlsan\nSejong\nGyeonggi\\n-do\nGangwon\\n-do\nChungcheong\\nbuk-do\nChungcheong\\nnam-do\nJeollabuk\\n-do\nJeollanam\\n-do\nGyeongsang\\nbuk-do\nGyeongsang\\nnam-do\nJeju-do\n\n\nin/out\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeoul\n0.59\n0.04\n0.04\n0.12\n0.04\n0.06\n0.04\n0.09\n0.18\n0.11\n0.07\n0.08\n0.06\n0.06\n0.05\n0.04\n0.11\n\n\nBusan\n0.02\n0.68\n0.02\n0.01\n0.01\n0.01\n0.09\n0.02\n0.01\n0.01\n0.01\n0.01\n0.01\n0.02\n0.03\n0.14\n0.03\n\n\nDaegu\n0.01\n0.02\n0.64\n0.01\n0.00\n0.01\n0.03\n0.02\n0.01\n0.01\n0.01\n0.01\n0.00\n0.01\n0.16\n0.02\n0.02\n\n\nIncheon\n0.03\n0.01\n0.01\n0.57\n0.01\n0.01\n0.01\n0.02\n0.04\n0.03\n0.02\n0.03\n0.02\n0.02\n0.01\n0.01\n0.03\n\n\nGwangju\n0.01\n0.00\n0.00\n0.01\n0.64\n0.01\n0.00\n0.01\n0.01\n0.00\n0.01\n0.01\n0.03\n0.16\n0.00\n0.00\n0.01\n\n\nDaejeon\n0.01\n0.01\n0.01\n0.01\n0.01\n0.57\n0.01\n0.16\n0.01\n0.01\n0.05\n0.06\n0.02\n0.01\n0.01\n0.01\n0.01\n\n\nUlsan\n0.01\n0.03\n0.01\n0.00\n0.00\n0.00\n0.60\n0.01\n0.00\n0.00\n0.01\n0.01\n0.00\n0.00\n0.03\n0.02\n0.01\n\n\nSejong\n0.00\n0.00\n0.00\n0.00\n0.00\n0.03\n0.00\n0.33\n0.00\n0.00\n0.02\n0.02\n0.01\n0.00\n0.00\n0.00\n0.00\n\n\nGyeonggi-do\n0.20\n0.03\n0.04\n0.19\n0.04\n0.07\n0.04\n0.10\n0.63\n0.16\n0.13\n0.16\n0.08\n0.07\n0.07\n0.04\n0.12\n\n\nGangwon-do\n0.02\n0.00\n0.01\n0.01\n0.00\n0.01\n0.01\n0.01\n0.02\n0.57\n0.02\n0.01\n0.01\n0.01\n0.01\n0.01\n0.01\n\n\nChungcheongbuk-do\n0.01\n0.00\n0.01\n0.01\n0.00\n0.05\n0.01\n0.08\n0.01\n0.02\n0.55\n0.03\n0.01\n0.01\n0.01\n0.01\n0.01\n\n\nChungcheongnam-do\n0.02\n0.01\n0.01\n0.02\n0.01\n0.08\n0.01\n0.09\n0.02\n0.02\n0.04\n0.50\n0.03\n0.01\n0.01\n0.01\n0.01\n\n\nJeollabuk-do\n0.01\n0.00\n0.00\n0.01\n0.03\n0.03\n0.01\n0.02\n0.01\n0.01\n0.01\n0.02\n0.68\n0.03\n0.01\n0.01\n0.01\n\n\nJeollanam-do\n0.01\n0.01\n0.00\n0.01\n0.18\n0.01\n0.01\n0.01\n0.01\n0.01\n0.01\n0.01\n0.03\n0.56\n0.01\n0.01\n0.01\n\n\nGyeongsangbuk-do\n0.02\n0.03\n0.16\n0.01\n0.00\n0.02\n0.07\n0.02\n0.01\n0.02\n0.03\n0.02\n0.01\n0.01\n0.54\n0.03\n0.02\n\n\nGyeongsangnam-do\n0.02\n0.13\n0.04\n0.01\n0.01\n0.02\n0.07\n0.02\n0.01\n0.01\n0.02\n0.02\n0.01\n0.02\n0.04\n0.63\n0.02\n\n\nJeju-do\n0.01\n0.01\n0.00\n0.01\n0.01\n0.00\n0.01\n0.01\n0.01\n0.00\n0.00\n0.00\n0.00\n0.01\n0.00\n0.01\n0.57\n\n\n\n\n\n\n\n\n서울에서 서울로 전이 확률은 \\(0.599\\), 서울에서 부산으로 전이 확률은 \\(0.02\\), 서울에서 대구로 전이 확률은 \\(0.01\\)\n이 상태전이확률을 이용하여 다음 상태를 구할 수 있음 =&gt; \\(X_{1} = T * X_{0}\\)로, 내년 인구 \\(X_{1}\\)는 상태전이확률 \\(T\\)와 현재 인구 \\(X_{0}\\)의 내적으로 구할 수 있음\n\n\npd.Series(np.dot(trans2022_percent, population2022), index=trans2022.index)\n\nin/out\nSeoul                9,770,837.12\nBusan                3,505,609.21\nDaegu                2,480,057.09\nIncheon              2,867,366.92\nGwangju              1,561,376.03\nDaejeon              1,549,372.04\nUlsan                1,137,238.28\nSejong                 382,488.00\nGyeonggi-do         12,914,091.78\nGangwon-do           1,521,104.04\nChungcheongbuk-do    1,544,788.58\nChungcheongnam-do    2,031,319.22\nJeollabuk-do         1,804,324.46\nJeollanam-do         1,761,857.89\nGyeongsangbuk-do     2,605,664.62\nGyeongsangnam-do     3,320,980.32\nJeju-do                680,562.40\ndtype: float64\n\n\n\n(\n    pd.Series(np.dot(trans2022_percent, population2022), index=trans2022.index)\n    - population2022\n)\n\nin/out\nSeoul                342,465.12\nBusan                187,797.21\nDaegu                116,366.09\nIncheon              -99,947.08\nGwangju              130,326.03\nDaejeon              103,300.04\nUlsan                 26,575.28\nSejong                -1,103.00\nGyeonggi-do         -675,340.22\nGangwon-do           -15,393.96\nChungcheongbuk-do    -50,269.42\nChungcheongnam-do    -91,717.78\nJeollabuk-do          34,717.46\nJeollanam-do         -55,839.11\nGyeongsangbuk-do       5,172.62\nGyeongsangnam-do      40,487.32\nJeju-do                2,403.40\ndtype: float64\n\n\n\n예측 결과와 2022년 인구의 차를 구하면, 2022년보다 서울, 부산, 대구는 증가하고, 인천, 경기도는 감소\n이전에 시도별 인구 예측과 다른 결과\n왜?\n\n\n인구 이동이 시도별로 제한되어 있지 않고 해외로 이동 할 수 있음\n\n\n좀 더 정확한 통계 데이터가 있었다면, 좀 더 정확한 인구 이동을 예측할 수 있음\n\n\n오차를 감안하고, 좀 더 진행\n\n\npopulation_trans_10 = pd.Series(\n    np.dot(np.linalg.matrix_power(trans2022_percent, 10), population2022),\n    index=trans2022.index,\n)\npopulation_trans_10\n\nin/out\nSeoul                9,583,711.88\nBusan                4,035,160.79\nDaegu                2,755,036.14\nIncheon              2,620,567.07\nGwangju              1,772,009.16\nDaejeon              1,635,241.08\nUlsan                1,242,147.43\nSejong                 380,625.97\nGyeonggi-do         11,830,243.09\nGangwon-do           1,452,452.31\nChungcheongbuk-do    1,462,715.57\nChungcheongnam-do    1,910,808.95\nJeollabuk-do         1,868,923.60\nJeollanam-do         1,813,847.21\nGyeongsangbuk-do     2,760,675.42\nGyeongsangnam-do     3,627,329.44\nJeju-do                687,542.90\ndtype: float64\n\n\n\npopulation_trans_40 = pd.Series(\n    np.dot(np.linalg.matrix_power(trans2022_percent, 40), population2022),\n    index=trans2022.index,\n)\npopulation_trans_40\n\nin/out\nSeoul                9,515,405.90\nBusan                4,108,709.06\nDaegu                2,786,914.64\nIncheon              2,598,500.56\nGwangju              1,778,599.39\nDaejeon              1,627,679.62\nUlsan                1,259,765.50\nSejong                 378,880.13\nGyeonggi-do         11,741,061.33\nGangwon-do           1,443,122.07\nChungcheongbuk-do    1,455,202.88\nChungcheongnam-do    1,900,294.83\nJeollabuk-do         1,863,544.92\nJeollanam-do         1,820,304.92\nGyeongsangbuk-do     2,787,467.64\nGyeongsangnam-do     3,686,145.10\nJeju-do                687,439.52\ndtype: float64",
    "crumbs": [
      "Home",
      "예제",
      "추천 시스템 스터디 실습 예제 2"
    ]
  }
]